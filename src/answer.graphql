type Answer implements Node {
  id: ID!

  comment: String!
  type: AnswerType!

  answerTo: Henken!
}

enum AnswerType {
  RIGHT
  WRONG
}

type AnswerEdge implements Edge {
  edge: String!
  node: Answer!
}

type AnswerConnection implements Connection {
  edges: [AnswerEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AnswerOrder {
  order: OrderDirection!
  field: AnswerOrderField!
}

enum AnswerOrderField {
  CREATED_AT
  UPDATED_AT
}

extend type Query {
  answer(id: ID!): Answer!
  findAnswer(id: ID!): FindAnswerPayload!
}

type FindAnswerPayload {
  answer: Answer!
}

extend type Mutation {
  createAnswer(answerTo: ID!, data: CreateAnswerData!): CreateAnswerPayload!
}

input CreateAnswerData {
  comment: String!
  type: AnswerType!
}

type CreateAnswerPayload {
  answer: Answer!
}
