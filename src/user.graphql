type User implements Node {
  id: ID!
  alias: String!
  displayName: String!

  followees(
    first: Int
    after: String
    last: Int
    before: String
    order: FollowingOrder = { order: DESC }
  ): UserConnection!
  followers(
    first: Int
    after: String
    last: Int
    before: String
    order: FollowingOrder = { order: DESC }
  ): UserConnection!

  postedHenkens(
    first: Int
    after: String
    last: Int
    before: String
    order: HenkenOrder = { order: DESC, field: CREATED_AT }
  ): HenkenConnection!
  recievedHenkens(
    first: Int
    after: String
    last: Int
    before: String
    order: HenkenOrder = { order: DESC, field: CREATED_AT }
  ): HenkenConnection!

  postedAnswers(
    first: Int
    after: String
    last: Int
    before: String
    order: AnswerOrder = { order: DESC, field: CREATED_AT }
  ): AnswerConnection!
  recievedAnswers(
    first: Int
    after: String
    last: Int
    before: String
    order: AnswerOrder = { order: DESC, field: CREATED_AT }
  ): AnswerConnection!
}

type UserEdge implements Edge {
  node: User!
  edge: String!
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input FollowingOrder {
  order: OrderDirection!
}

extend type Query {
  user(id: ID!): User!
  findUser(id: ID!): FindUserPayload!
  viewer: User
}

type FindUserPayload {
  user: User!
}
